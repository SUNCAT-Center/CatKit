#+Title: CatKit: Catalysis Kit
#+Author: SUNCAT Method Development Team
#+OPTIONS: toc:nil

#+BEGIN_HTML
<a href='https://travis-ci.org/SUNCAT-Center/CatKit.svg?branch=master'><img src='https://travis-ci.org/SUNCAT-Center/CatKit.svg?branch=master'/></a>
<a href='https://coveralls.io/github/SUNCAT-Center/CatKit?branch=master'><img src='https://coveralls.io/repos/github/SUNCAT-Center/CatKit/badge.svg?branch=master' alt='Coverage Status' /></a>
#+END_HTML

Welcome to CatKit! A staging ground for computational tools which are generally useful for catalysis research. The goal of the project is to provide a communal location for those interested in hosting such tools under a common banner. In doing so, we hope to provide the infrastructure to produce more advanced functionality based on modular components of individual contributors.


Currently, the primary function of CatKit is for controlled atomic structure enumeration. This is performed through symmetries which exist in these chemical systems. These symmetries take the form of translations and rotations in bulk structures where well defined lattices exist. For gas-phase, symmetries are defined through bonds formation rules.

By conserving bond-formation order and pairing it with bulk symmetry enumerations, a comprehensive mapping tools of all possible relevant chemical pathways can be produced. This information can then be aggregated and used to gain insights into catalytic systems.

Current enumerations include:

- [X] Surfaces structures
- [X] Adsorption sites
- [X] Catalytic structures
- [X] Gas phase molecules
- [X] Reaction mechanisms
- [X] Reaction routes

Similar to ASE, modules in CatKit are designed to be completely independent of one another. The =Gratoms= object is the single exception to the rule. 

* Gratoms object
The =Gratoms= object is a child class of the ASE =Atoms= object class. Effectively, this means that it has all the same functionality as an =Atoms= object with some additional features as well.

TODO: I can haz documentation?

* CatGen: Catalysis Generator
CatGen is an enumeration module designed to construct various catalytic structures.

<<<<<<< HEAD
- [X] Gas phase molecules
- [ ] Bulk structures
- [X] Surfaces structures
- [X] Adsorption sites
- [X] Catalytic structures
=======
periodic = sites.get_periodic_sites(screen=False)
print('Sites by periodicity:\n', periodic[::5], '\n')

symmetric = sites.get_symmetric_sites(unique=True, screen=False)
print('Sites by symmetry:\n', symmetric[::5])

atm = {1: 'X', 2: 'He', 3: 'F', 4: 'N'}
for i, c in enumerate(coordinates):
    typ = connectivity[i]
    atoms += Atom(atm[typ], c + [0, 0, 2])

write(
    './images/CuPd3_321-sites.pov',
    atoms,
    show_unit_cell=2,
    run_povray=True)
#+END_SRC

#+RESULTS:
:RESULTS:
Coordinates:
 [[ 8.66025404  1.15727512 10.34522484]
 [ 8.66025404 10.41547612 11.68153105]
 [ 2.88675135  3.27894619 12.0156076 ]
 [ 7.21687836  3.27894619 12.0156076 ]
 [ 2.88675135  6.75077156 11.3474545 ]
 [ 5.77350269  7.7151675  11.68153105]
 [ 8.66025404  8.67956344 12.0156076 ]
 [10.10362971  5.97925481 12.0156076 ]
 [ 1.9245009   3.34323925 12.34968415]
 [ 6.73575314  7.45799525 11.90424875]
 [ 6.73575314  1.28586125 11.01337794]
 [ 4.33012702 10.41547612 11.68153105]] 

Connectivity:
 [1 1 2 2 2 2 2 2 3 3 3 4] 

Topology:
 [array([15]) array([21]) array([19, 22]) array([20, 25]) array([18, 19])
 array([17, 23]) array([21, 24]) array([24, 19]) array([19, 25, 22])
 array([24, 23, 17]) array([21, 15, 20]) array([23, 15, 18, 22])] 

Sites by periodicity:
 [  0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5
  90  95 100 105  96 115  97 125  95  93 122 116  90  94 153 116  97 109
 151 125 124 106 153 105 115 127 220 100  97 116 124 177 124 178 100 106
  97  98 178  93 108 115 106 116 126  97 105 100 330 331 340 338 339 331
 340 336 359 359 357 340 341 357 358 334 361 331 331 342 349 336 338 445
  90  90] 

Sites by symmetry:
 [  0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5
  90  95 100 105  96 115  97 125  95  93 122 116  90  94 153 116  97 109
 151 125 124 106 153 105 115 127 220 100  97 116 124 177 124 178 100 106
  97  98 178  93 108 115 106 116 126  97 105 100 330 331 340 338 339 331
 340 336 359 359 357 340 341 357 358 334 361 331 331 342 349 336 338 445
  90  90]
:END:

When we call =get_periodic_sites()=, we see that some indices are repeated. This is to indicate that these sites are identical in the context of periodic boundaries. If we set =screen= to True, we will only be given the sites within the original unit cell (between 0-1 in fractional coordinates) and all indices will be unique.

In this case there are no symmetrically reducible sites, so =get_symmetric_sites()= returns the same result.

NOTE: The indices of the periodic and symmetry site functions are in reference to the extended unit cell.

*** Adsorption vectors
The most commonly studied miller indices, such as fcc(1, 1, 1), produce a flat surface. This means the most favorable angle of adsorption will always be perpendicular to the surface. This is not always the case for higher miller indices. 

CatKit defines the most favorable vector for adsorption as the one which is furthest from all neighboring surface atoms. This vector is important for the generation of sensible 3D structures from graph enumerations. This is particularly true for adsorbates with multiple atoms.

#+CAPTION: Illustration of adsorption vectors (red dots) on a CuPd_{3} (2, 1, 1) surface.
[[./images/adsorption-vectors.png]]

#+BEGIN_SRC python :results silent :exports code
from catkit.adsorption import AdsorptionSites
from catkit.surface import SlabGenerator
from ase.build import bulk
from ase.io import write
from ase import Atom
import numpy as np

bulk = bulk('Pd', 'fcc', a=5, cubic=True)
bulk[3].symbol = 'Cu'

gen = SlabGenerator(
    bulk,
    miller_index=(2, 1, 1),
    layers=10,
    vacuum=5)

atoms = gen.get_slab(primitive=True)

top, _ = gen.get_voronoi_surface_atoms(atoms, attach_graph=False)
atoms.set_surface_atoms(top)
sites = AdsorptionSites(atoms)

coordinates = sites.get_coordinates()
vectors = sites.get_adsorption_vectors()

heights = np.arange(0, 2, 0.25)
for i, c in enumerate(coordinates):
    for h in heights:
        atoms += Atom('X', c + vectors[i] * h)

atoms.wrap()
write(
    './images/adsorption-vectors.pov',
    atoms * (2, 1, 1),
    show_unit_cell=2,
    rotation='-90x, 20z',
    run_povray=True)
#+END_SRC

*** Adsorption structure builder
Creating good initial guesses for 3D structures can be tedious to perform by hand, even small molecules. The =Builder= module in the adsorption package seeks to help automate this task.

The =Builder= module currently takes two Gratoms objects as input since graph information is required. 

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.surface import SlabGenerator
from catkit.adsorption import Builder
from ase.build import bulk
import numpy as np

atoms = bulk('Pd', 'fcc', a=4, cubic=True)
atoms[3].symbol = 'Cu'

gen = SlabGenerator(
    atoms,
    miller_index=[1, 1, 1],
    layers=4,
    fixed=2,
    vacuum=10)

slab = gen.get_slab()

# Use the slab generator to attach a graph in this step
surface_sites = gen.get_voronoi_surface_atoms(slab)[0]
slab.set_surface_atoms(surface_sites)

builder = Builder(slab)
print(builder)
#+END_SRC

#+RESULTS:
:RESULTS:
Adsorption builder for Cu4Pd12 slab
9 unique adsorption sites
21 unique adsorption edges
:END:

**** Monodentate adsorption
When a single atom of the molecule is considered bonded to the surface, the builder attempts to arrange non-bonded atoms in an intelligent fashion.

In this example, the use of =-1= as a tag on the adsorbate is used to indicate it is bonded to the slab.

[[./images/CH3-ads.png]]

[[./images/CH3-ads-top.png]]

#+BEGIN_SRC python :results silent :exports code
from catkit.pathways import ReactionNetwork
from catkit.surface import SlabGenerator
from catkit.adsorption import Builder
from ase.build import bulk
from ase.io import write
import numpy as np

atoms = bulk('Pd', 'fcc', a=4, cubic=True)
atoms[3].symbol = 'Cu'

gen = SlabGenerator(
    atoms,
    miller_index=[1, 1, 1],
    layers=4,
    vacuum=4)

slab = gen.get_slab()
surface_sites = gen.get_voronoi_surface_atoms(slab)[0]
slab.set_surface_atoms(surface_sites)

with ReactionNetwork(db_name='C2H6-example.db') as rn:
    rn.molecule_search({'C': 2, 'H': 6})
    molecules = rn.load_molecules()

adsorbate = molecules[8]
adsorbate.set_tags([0, -1, 0, 0])

builder = Builder(slab)
ads_slab = builder.add_adsorbate(adsorbate, index=1)

img_name = './images/CH3-ads.pov'
write(
    img_name,
    ads_slab,
    show_unit_cell=2,
    rotation='-90x',
    run_povray=True)

write(
    img_name.replace('.pov', '-top.pov'),
    ads_slab,
    show_unit_cell=2,
    run_povray=True)
#+END_SRC

**** Bidentate adsorption
The =Builder= class can also produce structures for species bonded in two locations. In this example, indexing of the atoms which bond to the surface is done with the =bonds= key.

Also, using setting the =index= key to =-1= will return a list of all the possible adsorbed structures.

[[./images/CH2CH-ads.png]]

[[./images/CH2CH-ads-top.png]]

#+BEGIN_SRC python :results output org drawer :exports code
from catkit.pathways import ReactionNetwork
from catkit.surface import SlabGenerator
from catkit.adsorption import Builder
from ase.build import bulk
from ase.io import write
import numpy as np

atoms = bulk('Pd', 'fcc', a=4, cubic=True)
atoms[3].symbol = 'Cu'

gen = SlabGenerator(
    atoms,
    miller_index=[1, 1, 1],
    layers=4,
    vacuum=4)

slab = gen.get_slab()
surface_sites = gen.get_voronoi_surface_atoms(slab)[0]
slab.set_surface_atoms(surface_sites)

with ReactionNetwork(db_name='C2H6-example.db') as rn:
    rn.molecule_search({'C': 2, 'H': 6})
    molecules = rn.load_molecules()

adsorbate = molecules[13]

builder = Builder(slab)
ads_slab = builder.add_adsorbate(adsorbate, bonds=[1, 3], index=-1)

print('{} adsorption structures generated'.format(len(ads_slab)))

img_name = './images/CH2CH-ads.pov'
write(
    img_name,
    ads_slab[17],
    show_unit_cell=2,
    rotation='-90x',
    run_povray=True)

write(
    img_name.replace('.pov', '-top.pov'),
    ads_slab[17],
    show_unit_cell=2,
    run_povray=True)
#+END_SRC

#+RESULTS:
:RESULTS:
21 adsorption structures generated
:END:

** Gas-phase:
- [X] Various chemical species (C, H, and O currently tested)
- [X] Molecules with single bonds
- [X] Molecules with double bonds
- [X] Molecules with triple bonds
- [X] Molecules with single cyclical groups
- [X] Molecules with double cyclical groups
- [X] Molecules with triple cyclical groups
- [X] UFF 3D structure predictions

*** Example usage:
Below is an example script which generates some simple figures using [[https://networkx.github.io/documentation/networkx-1.10/index.html][NetworkX]] code for all molecules up to C_{2}H_{6}.

1 [[./images/molecule-1.png]]
2 [[./images/molecule-2.png]]
3 [[./images/molecule-3.png]]
4 [[./images/molecule-4.png]]
5 [[./images/molecule-5.png]]
6 [[./images/molecule-6.png]]
7 [[./images/molecule-7.png]]
8 [[./images/molecule-8.png]]
9 [[./images/molecule-9.png]]
10 [[./images/molecule-10.png]]
11 [[./images/molecule-11.png]]
12 [[./images/molecule-12.png]]
13 [[./images/molecule-13.png]]
14 [[./images/molecule-14.png]]
15 [[./images/molecule-15.png]]
16 [[./images/molecule-16.png]]
17 [[./images/molecule-17.png]]

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.pathways import ReactionNetwork
import time

start = time.time()

db_name = 'C2H6-example.db'
with ReactionNetwork(db_name=db_name) as rn:

    # Run a molecule search
    rn.molecule_search(
        element_pool={'C': 2, 'H': 6},
        multiple_bond_search=False)

    # Load the molecules
    molecules = rn.load_molecules()

    # Get 3D structure estimates (requires RDKit)
    try:
        from catkit.api.rd_kit import plot_molecule, get_uff_coordinates

        for i, molecule in molecules.items():
            plot_molecule(
                molecule,
                file_name='./images/molecule-{}.png'.format(i))

            molecule = get_uff_coordinates(molecule, steps=50)
            rn.save_3d_structure(molecule)

        images = rn.load_3d_structures()
    except(ImportError):
       pass

print('Process completed in {:.1f}s'.format(time.time() - start))
#+END_SRC

#+RESULTS:
:RESULTS:
Process completed in 28.6s
:END:

** Reaction mechanisms:
- [X] Addition and Reduction reactions (R1 + R2 <--> P1)
- [X] Bond formation / breaking pathways (R1 <--> P1)
- [X] Reconfiguration reactions (R1 <--> R1*)
- [X] Substitution reactions (R1 + R2 <--> P1 + P2)

*** Reaction networks:
Enumeration of possible elementary reaction steps for gas-phase C_{2}H_{6} species.

#+CAPTION: Reaction network for C2H6 gas phase molecules. Numbers are indexes from the gas-phase example figures.
[[./images/reaction-network.png]]

Pathway exploration is currently integrated with gas-phase molecule search. See the gas-phase molecule search example for further details on molecule generations. Below, a reaction network is generated.

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.pathways import ReactionNetwork
import time

start = time.time()

# Load existing database
db_name = 'C2H6-example.db'

with ReactionNetwork(db_name=db_name) as rn:
    # Substitution pathway search is expensive!
    rn.path_search(
        reconfiguration=False,
        substitution=False)

    rn.plot_reaction_network(file_name='./images/reaction-network.png')

print('Process completed in {:.1f}s'.format(time.time() - start))
#+END_SRC

#+RESULTS:
:RESULTS:
Process completed in 0.6s
:END:

Once the reaction network has been produce, we can illustrate the potential pathways using the following code.

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.pathways import ReactionNetwork
import numpy as np
import networkx as nx
from ase.utils import formula_hill

with ReactionNetwork(db_name='C2H6-example.db') as rn:
    molecules = rn.load_molecules()
    pathways = rn.load_pathways()

names = np.empty(len(molecules) + 1, dtype='a5')
names[0] = ''
for k, v in molecules.items():
    atn = nx.get_node_attributes(v.graph, 'number')
>>>>>>> upstream/master

It also has functionality for enumeration of other systems relevant to the field of catalysis.

- [X] Reaction mechanisms
- [X] Reaction routes

For additional details regarding how the generator operates, including example usage, see the [[./catgen/readme.org][CatGen readme]].

** Reaction routes
- [X] Overall/Response reaction routes
- [X] Linearly independent set of reaction routes
- [X] Complete set of full reaction routes
- [X] Complete set of empty reaction routes
- [ ] Graph based enumeration

*** Overall/Response reaction routes
For a given set of elementary mechanisms, there is frequently many types of chemistry which could be considered simultaneously. As an example, we reproduce an example from the original literature which the algorithm is adopted from cite:fishtik-2004-new-approac.

In this example, we choose the number of independent species.

#+BEGIN_SRC python :results output org drawer
from catkit.route import get_response_reactions
import numpy as np

epsilon = np.array([
    # To keep indexing consistent
    [ 0, 0, 0, 0],  # I1
    [ 0, 0, 0, 0],  # I2
    [ 0, 0, 0, 0],  # I3
    [ 0, 0, 0, 0],  # I4
    [ 0, 0, 0, 0],  # I5
    # C  N  H  O
    [ 1, 0, 4, 0],  # CH4
    [ 0, 1, 0, 1],  # NO
    [ 0, 0, 0, 2],  # O2
    [ 0, 2, 0, 0],  # N2
    [ 1, 0, 0, 1],  # CO
    [ 1, 0, 0, 2],  # CO2
    [ 0, 0, 2, 1],  # H2O
])

terminal = [5, 6, 7, 8, 9, 10, 11]
OR, species = get_response_reactions(epsilon, terminal, species=True)

print('Overall reaction routes:')
print(OR, '\n')

print('Terminal species:')
print(species)
#+END_SRC

#+RESULTS:
:RESULTS:
Overall reaction routes:
[[ 0  0  0  0  0  0  2 -1 -1  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  2 -2  0]
 [ 0  0  0  0  0  2  0  3  0 -2  0 -4]
 [ 0  0  0  0  0  1  0  2  0  0 -1 -2]
 [ 0  0  0  0  0  0  2  0 -1  2 -2  0]
 [ 0  0  0  0  0  2  6  0 -3 -2  0 -4]
 [ 0  0  0  0  0  1  4  0 -2  0 -1 -2]
 [ 0  0  0  0  0  1  0  0  0 -4  3 -2]] 

Terminal species:
[[ 5  6  7  8  9]
 [ 5  6  7  9 10]
 [ 5  6  7  9 11]
 [ 5  6  7 10 11]
 [ 5  6  8  9 10]
 [ 5  6  8  9 11]
 [ 5  6  8 10 11]
 [ 5  6  9 10 11]]
:END:

The terminal species matrix will always contain =s + 1= entries, where =s= is the number of elements in the chemistry. This does not necessarily mean that the overall reaction produced will include all =s + 1= species.

*** Linearly independent set
Currently, only Happel-Sellers reaction routes can be enumerated cite:fishtik-2004-new-approac. These routes require that the user choose a number of terminal species equal to =s + 1=. The terminal species selected will only produce overall reactions associated with the chemistry which is enumerated in the previous example.

Below we take another example from to produce a linearly independent set of reaction routes cite:fishtik-2004-react-route-graph-2.

#+BEGIN_SRC python :results output org drawer
from catkit.route import get_response_reactions
from catkit.route import get_heppel_sellers
import numpy as np

nu = np.array([
    # H2Os, COs, CO2s, H2s, Hs, OHs, Os, HCOOs, H2O, CO, CO2, H2
    [   0,   1,   0,   0,   0,   0,   0,   0,   0,  -1,   0,   0],  # s1
    [   1,   0,   0,   0,   0,   0,   0,   0,  -1,   0,   0,   0],  # s2
    [   0,   0,  -1,   0,   0,   0,   0,   0,   0,   0,   1,   0],  # s3
    [   0,   0,   0,   1,  -2,   0,   0,   0,   0,   0,   0,   0],  # s4
    [   0,   0,   0,  -1,   0,   0,   0,   0,   0,   0,   0,   1],  # s5
    [  -1,   0,   0,   0,   1,   1,   0,   0,   0,   0,   0,   0],  # s6
    [   0,  -1 ,  1,   0,   0,   0,  -1,   0,   0,   0,   0,   0],  # s7
    [   0,  -1,   0,   0,   0,  -1,   0,   1,   0,   0,   0,   0],  # s8
    [   0,   0,   0,   0,   1,  -1,   1,   0,   0,   0,   0,   0],  # s9
    [   0,  -1,   1,   0,   1,  -1,   0,   0,   0,   0,   0,   0],  # s10
    [   0,   0,   1,   0,   1,   0,   0,  -1,   0,   0,   0,   0],  # s11
    [   0,   0,   1,   0,   0,   1,  -1,  -1,   0,   0,   0,   0],  # s12
    [  -1,   0,   0,   1,  -1,   1,   0,   0,   0,   0,   0,   0],  # s14
    [   0,   0,   0,   1,  -1,  -1,   1,   0,   0,   0,   0,   0],  # s15
    [   0,   0,   1,   1,  -1,   0,   0,  -1,   0,   0,   0,   0],  # s17
])

epsilon = np.array([
    # Just a place holder
    [ 0, 0, 0],  # H2OS
    [ 0, 0, 0],  # COS
    [ 0, 0, 0],  # CO2S
    [ 0, 0, 0],  # H2S
    [ 0, 0, 0],  # HS
    [ 0, 0, 0],  # OHS
    [ 0, 0, 0],  # OS
    [ 0, 0, 0],  # HCOOS
    # C, H, O
    [ 0, 2, 1],  # H2O
    [ 1, 0, 1],  # CO
    [ 1, 0, 2],  # CO2
    [ 0, 2, 0],  # H2
])

# Indices of the terminal species
terminal = [8, 9, 10, 11]

RER, species = get_response_reactions(epsilon, terminal, species=True)
sigma = get_heppel_sellers(nu, species[0])

print('Linearly independent set of reaction routes:')
print(sigma, '\n')

print('Overall reaction routes:')
print(np.dot(sigma, nu))
#+END_SRC

#+RESULTS:
:RESULTS:
Linearly independent set of reaction routes:
[[ 1  1  1  1  1  1  1  0  1  0  0  0  0  0  0]
 [ 1  1  1  1  1  1  0  0  0  1  0  0  0  0  0]
 [ 1  1  1  1  1  1  0  1  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  1 -1  0  0  0 -1  0  0  0]
 [ 0  0  0  1  0  1  0  0  0  0  0  0 -1  0  0]
 [ 1  1  1  0  1  1  1  0  0  0  0  0  0  1  0]
 [ 1  1  1  0  1  1  0  1  0  0  0  0  0  0  1]] 

Overall reaction routes:
[[ 0  0  0  0  0  0  0  0 -1 -1  1  1]
 [ 0  0  0  0  0  0  0  0 -1 -1  1  1]
 [ 0  0  0  0  0  0  0  0 -1 -1  1  1]
 [ 0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0 -1 -1  1  1]
 [ 0  0  0  0  0  0  0  0 -1 -1  1  1]]
:END:

Note that all of the linearly independent reaction routes return the same overall reaction except for one. This is because some routes will return a trivial solution. Routes which return the correct overall chemistry are known as full routes (FR) and those which return trivial solutions are called empty routes (ER).

*** Complete full and empty enumeration
Computationally, collecting an arbitrary set of linearly independent reaction routes is computationally inexpensive and can potentially be useful on its own. Complete enumeration techniques currently implemented in CatKit become computationally infeasible with large numbers of species and elementary steps.

However, it is still often desirable for some applications to have a full listing of both full and empty reaction routes. This can be achieved more efficiently when beginning with a linearly independent set of reaction routes cite:fishtik-2002-ubi-qep.

#+BEGIN_SRC python :results output org drawer
from catkit.route import get_response_reactions
from catkit.route import get_reaction_routes
from catkit.route import get_heppel_sellers
import numpy as np
np.set_printoptions(threshold=np.inf)

nu = np.array([
    [  1,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0],  # s1
    [  0,  1,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0],  # s2
    [  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  1,  0],  # s3
    [  0,  0,  0,  1, -2,  0,  0,  0,  0,  0,  0,  0],  # s4
    [  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  1],  # s5
    [ -1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0],  # s6
    [  0, -1,  1,  0,  0,  0, -1,  0,  0,  0,  0,  0],  # s7
    [  0, -1,  0,  0,  0, -1,  0,  1,  0,  0,  0,  0],  # s8
    [  0,  0,  0,  0,  1, -1,  1,  0,  0,  0,  0,  0],  # s9
    [  0, -1,  1,  0,  1, -1,  0,  0,  0,  0,  0,  0],  # s10
    [  0,  0,  1,  0,  1,  0,  0, -1,  0,  0,  0,  0],  # s11
    [  0,  0,  1,  0,  0,  1, -1, -1,  0,  0,  0,  0],  # s12
    [ -1,  0,  0,  0,  0,  2, -1,  0,  0,  0,  0,  0],  # s13
])

epsilon = np.array([
    # C, H, O
    [ 0, 2, 1],  # SH2O
    [ 1, 0, 1],  # SCO
    [ 1, 0, 2],  # SCO2
    [ 0, 2, 0],  # SH2
    [ 0, 1, 0],  # SH
    [ 0, 1, 1],  # SOH
    [ 0, 0, 1],  # SO
    [ 1, 1, 2],  # SOOCH
    [ 0, 2, 1],  # H2O
    [ 1, 0, 1],  # CO
    [ 1, 0, 2],  # CO2
    [ 0, 2, 0],  # H2
])


# Indices of the species considered terminal
terminal = [8, 9, 10, 11]

RER, species = get_response_reactions(epsilon, terminal, species=True)
sigma = get_heppel_sellers(nu, species[0])
FR, ER = get_reaction_routes(nu, sigma)

print('{} Full reaction routes:'.format(len(FR)))
print(FR, '\n')

print('{} Empty reaction routes:'.format(len(ER)))
print(ER)
#+END_SRC

#+RESULTS:
:RESULTS:
17 Full reaction routes:
[[ 1  1  1  1  1  1  1  0  1  0  0  0  0]
 [ 1  1  1  1  1  1  0  0  0  1  0  0  0]
 [ 1  1  1  1  1  1  0  1  0  0  1  0  0]
 [ 1  1  1  1  1  2  1  0  0  0  0  0 -1]
 [ 1  1  1  1  1  0  0  0  0  1  1 -1  1]
 [ 1  1  1  1  1  0  0  0  1  1  0  0  1]
 [ 1  1  1  1  1  0  0  1  0  0  2 -1  1]
 [ 1  1  1  1  1  0  0 -1  0  2  0 -1  1]
 [ 1  1  1  1  1  0  0  1  2  0  0  1  1]
 [ 1  1  1  1  1  0  0  1  1  0  1  0  1]
 [ 1  1  1  1  1  0  1  0  0  0  2 -2  1]
 [ 1  1  1  1  1  0 -1  0  0  2  0  0  1]
 [ 1  1  1  1  1  0  1  0  2  0  0  0  1]
 [ 1  1  1  1  1  0 -1  2  0  0  2  0  1]
 [ 1  1  1  1  1  2  0  1  0  0  0  1 -1]
 [ 1  1  1  1  1  1  0  1  1  0  0  1  0]
 [ 1  1  1  1  1  1  1  0  0  0  1 -1  0]] 

12 Empty reaction routes:
[[ 0  0  0  0  0  0  1 -1  0  0  0 -1  0]
 [ 0  0  0  0  0  0  0  0  1  0 -1  1  0]
 [ 0  0  0  0  0  0  0  1  0 -1  1  0  0]
 [ 0  0  0  0  0  0  0  1  1 -1  0  1  0]
 [ 0  0  0  0  0  0  1  0  0 -1  1 -1  0]
 [ 0  0  0  0  0  0  1  0  1 -1  0  0  0]
 [ 0  0  0  0  0  0  1 -1  1  0 -1  0  0]
 [ 0  0  0  0  0  1  0  0  0  0 -1  1 -1]
 [ 0  0  0  0  0  1  0  0 -1  0  0  0 -1]
 [ 0  0  0  0  0  1  0  1  0 -1  0  1 -1]
 [ 0  0  0  0  0  1  1  0  0 -1  0  0 -1]
 [ 0  0  0  0  0  1  1 -1  0  0 -1  0 -1]]
:END:

* Dependencies
CatKit attempts to make use of basic functionalities implemented by existing softwares when possible to extend its capabilities.

<<<<<<< HEAD
=======
- [[https://wiki.fysik.dtu.dk/ase/][Atomic Simulation Environment]]
Atomic Simulation Environment (ASE) is a convenient platform with many good conventions for atoms objects, which CatKit relies heavily upon.

- [[https://atztogo.github.io/spglib/index.html][Spglib]]
A Bulk symmetry library with functionality for identifying rotational and translation symmetries in bulk lattice structures.

- [[https://networkx.github.io/documentation/networkx-1.10/index.html][NetworkX]]
Code for Graph theory implementation used to identify redundant structures.

>>>>>>> upstream/master
A full list of required packaged can be found in [[./requirements.txt]].
