#+Title: CatKit: Catalysis Kit
#+Author:Jacob Boes
#+OPTIONS: toc:nil

#+BEGIN_HTML
<a href='https://travis-ci.org/SUNCAT-Center/CatKit.svg?branch=master'><img src='https://travis-ci.org/SUNCAT-Center/CatKit.svg?branch=master'/></a>
<a href='https://coveralls.io/github/SUNCAT-Center/CatKit?branch=master'><img src='https://coveralls.io/repos/github/SUNCAT-Center/CatKit/badge.svg?branch=master' alt='Coverage Status' /></a>
#+END_HTML

Welcome to CatKit! A staging ground for computational tools which are generally useful for catalysis.

Currently, the primary function of CatKit is for controlled atomic structure enumeration. This is performed through symmetries which exist in these chemical systems. These symmetries take the form of translations and rotations in bulk structures where well defined lattices exist. For gas-phase, symmetries are defined through bonds formation rules.

By conserving bond-formation order and pairing it with bulk symmetry enumerations, a comprehensive mapping tools of all possible relevant chemical pathways can be produced. This information can then be aggregated and used to gain insights into catalytic systems.

Current enumerations include:

- [X] Surfaces structure
- [X] Adsorption sites
- [X] Simple gas-phase molecules
- [X] Reaction pathways

Similar to ASE, modules in CatKit are designed to be completely independent of one another. The =Gratoms= object is the single exception to the rule. 

* Gratoms object
The =Gratoms= object is a child class of the ASE =Atoms= object class. Effectively, this means that it has all the same functionality as an =Atoms= object with some additional features as well.

TODO: I can haz documentation?

* Enumeration
** Surface module:
The surface module is designed to leverage information about the bulk structure which a slab is derived from.

- [X] Surfaces produced from all user defined bulk lattices
- [X] Any miller indices
- [X] Unique terminations of possible surfaces
- [X] Surface atom identification
- [X] Voronoi connectivity of slab atoms
- [X] Enumerate surface adsorption sites

*** Slab enumeration:
Example surface generation for the 2 terminations of a fcc(2, 1, 1) surface construction of an L1_{0} CuPd_{3} cubic alloy.

First termination of 9 layer slab of CuPd_{3}.
[[./images/CuPd3-term-0.png]] [[./images/CuPd3-term-0-top.png]]

Second termination of 9 layer slab of CuPd_{3}.
[[./images/CuPd3-term-1.png]] [[./images/CuPd3-term-1-top.png]]

#+BEGIN_SRC python :results silent :exports code
from catkit.surface import SlabGenerator
from ase.io import write
from ase.build import bulk

# Make a test slab
atoms = bulk('Pd', 'fcc', a=4, cubic=True)
atoms[3].symbol = 'Cu'

gen = SlabGenerator(
    atoms,
    miller_index=(2, 1, 1),
    layers=9,
    fixed=5,
    vacuum=4)

terminations = gen.get_unique_terminations()
for i, t in enumerate(terminations):
    slab = gen.get_slab(iterm=i)

    # Create side and top-down visuals
    img_name = './images/CuPd3-term-{}.pov'.format(i)
    write(
        img_name,
        slab,
        show_unit_cell=2,
        rotation='-90x',
        run_povray=True)

    write(
        img_name.replace('.pov', '-top.pov'),
        slab,
        show_unit_cell=2,
        run_povray=True)
#+END_SRC

*** Slab graph and surface atoms:
One of the less visual features is the identification of the surface atoms and identification of nearest-neighbors which is subsequently used for creating graph edges. When performing more sophisticated operations, such as adsorption site identification, these functions are being called automatically.

Slab of hcp Pd with (1, 1, 0) miller index. Top surface atoms have been changed to Au. 
[[./images/Pd-surface-atoms.png]]

#+BEGIN_SRC python  :results output org drawer :exports both
from catkit.surface import SlabGenerator
from ase.build import bulk
from ase.io import write
from ase import Atom

bulk = bulk('Pd', 'hcp', a=3, cubic=True)

gen = SlabGenerator(
    bulk,
    miller_index=(1, 1, 0),
    layers=6,
    fixed=2,
    vacuum=4)

atoms = gen.get_slab()
con_matrix = gen.get_graph_from_bulk(atoms, attach=True)
print(con_matrix)

# We can identify both top and bottom sites.
top, bottom = gen.get_voronoi_surface_atoms(atoms)
atoms.set_surface_atoms(top)

for i in top:
    atoms[i].symbol = 'Au'

write(
    './images/Pd-surface-atoms.pov',
    atoms,
    show_unit_cell=2,
    rotation='-90x',
    run_povray=True)
#+END_SRC

#+RESULTS:
:RESULTS:
[[0. 2. 2. 2. 1. 0. 0. 0. 0. 0. 0. 0.]
 [2. 0. 2. 2. 0. 1. 0. 0. 0. 0. 0. 0.]
 [2. 2. 0. 2. 2. 2. 1. 0. 0. 0. 0. 0.]
 [2. 2. 2. 0. 2. 2. 0. 1. 0. 0. 0. 0.]
 [1. 0. 2. 2. 0. 2. 2. 2. 1. 0. 0. 0.]
 [0. 1. 2. 2. 2. 0. 2. 2. 0. 1. 0. 0.]
 [0. 0. 1. 0. 2. 2. 0. 2. 2. 2. 1. 0.]
 [0. 0. 0. 1. 2. 2. 2. 0. 2. 2. 0. 1.]
 [0. 0. 0. 0. 1. 0. 2. 2. 0. 2. 2. 2.]
 [0. 0. 0. 0. 0. 1. 2. 2. 2. 0. 2. 2.]
 [0. 0. 0. 0. 0. 0. 1. 0. 2. 2. 0. 2.]
 [0. 0. 0. 0. 0. 0. 0. 1. 2. 2. 2. 0.]]
:END:

By using the ``attach'' flag this connectivity matrix has already been converted into a NetworkX graph and attached to the Gratoms object for future use.

*** Simple site enumeration:
With a generated slab, we can also produce the unique adsorption sites which would be present on a given surface.

#+CAPTION: Symmetry unique sites of CuPd_{3} (111). Green denote 3-fold hollows, white are bridge, and red are top sites.
[[./images/CuPd3_111-sites.png]]

#+BEGIN_SRC python :results silent :exports code
from catkit.surface import SlabGenerator
from ase.build import bulk
from ase.io import write
from ase import Atom

bulk = bulk('Pd', 'fcc', a=5, cubic=True)
bulk[3].symbol = 'Cu'

gen = SlabGenerator(
    bulk,
    miller_index=(1, 1, 1),
    layers=3,
    fixed=2,
    vacuum=10)

atoms = gen.get_slab(primitive=True)
coordinates, connectivity = gen.adsorption_sites(atoms)

atm = {1: 'X', 2: 'He', 3: 'F'}
for i, c in enumerate(coordinates):
    typ = connectivity[i]
    atoms += Atom(atm[typ], c + [0, 0, 2])

write(
    './images/CuPd3_111-sites.pov',
    atoms,
    show_unit_cell=2,
    run_pvoray=True)
#+END_SRC

** Adsorption module
Using the =AdsorptionSites= class form the adsorption module provides more powerful tools for surface site enumeration.

- [X] Adsorption site enumeration based on user defined surface atoms.
- [X] 1st and 2nd (rank) nearest neighbor topology of surface atoms.
- [X] Connectivity of adsorption site (hollow = 3, bridge = 2, top = 1)
- [X] 2D adsorption coordinates relative to miller index.
- [X] Adsorption vectors for accurate 3D projection.
- [X] Connectivity between adsorption sites

*** ``Manual'' Adsorption site enumeration and visualization:
Adsorption site enumeration in CatKit is solely dependent upon surface atom identification. This can be performed automatically using =catkit.surface.SlabGenerator=, however, this function relies upon bulk properties which are not always available.

Here, we show how the surface sites can be assigned manually which is often convenient enough. Other means of surface site identification will be added in a future release.

Surface atoms are used to define top sites (green), which are then used to define remaining sites (red) via Delaunay triangulation symmetries.
[[./images/Pd3Cu-adsorption-sites.png]]

#+BEGIN_SRC python :results silent :exports code
from catkit.adsorption import AdsorptionSites
from catkit.surface import SlabGenerator
from ase.build import bulk

bulk = bulk('Pd', 'fcc', a=5, cubic=True)
bulk[3].symbol = 'Cu'

gen = SlabGenerator(
    bulk,
    miller_index=(1, 1, 1),
    layers=3,
    vacuum=4)

atoms = gen.get_slab(primitive=True)
atoms.set_surface_atoms([8, 9, 10, 11])

sites = AdsorptionSites(atoms)
sites.plot('./images/Pd3Cu-adsorption-sites.png')
#+END_SRC

*** Extended site enumeration:
For more complex adsorption enumeration, we often require more detailed information 

The =AdsorptionSite= class also produces an expanded unit cell which is useful for operations which require observation of periodic boundary conditions. This extended unit cell can be accessed by toggling the ``screen'' argument.

All possible adsorption sites of of CuPd_{3} (3, 2, 1). Site identifications are the same as above with the addition of blue which shows 4-fold hollow sites.
[[./images/CuPd3_321-sites.png]]

#+BEGIN_SRC python :results output org drawer :exports code
from catkit.adsorption import AdsorptionSites
from catkit.surface import SlabGenerator
from ase.build import bulk
from ase.io import write
from ase import Atom

bulk = bulk('Pd', 'fcc', a=5, cubic=True)
bulk[3].symbol = 'Cu'

gen = SlabGenerator(
    bulk,
    miller_index=(3, 2, 1),
    layers=13,
    vacuum=5)

atoms = gen.get_slab(primitive=True)

top, _ = gen.get_voronoi_surface_atoms(atoms)
atoms.set_surface_atoms(top)
sites = AdsorptionSites(atoms)

# Positon of each site
coordinates = sites.get_coordinates()

# Number of adjacent surface atoms
connectivity = sites.get_connectivity()

# The indices of adjacent surface atoms
topology = sites.get_topology()

# Only print every 5th entry.
print('Coordinates:\n', coordinates[::5], '\n')
print('Connectivity:\n', connectivity[::5], '\n')
print('Topology:\n', topology[::5], '\n')

periodic = sites.get_periodic_sites(screen=False)
print('Sites by periodicity:\n', periodic[::5], '\n')

symmetric = sites.get_symmetric_sites(unique=True, screen=False)
print('Sites by symmetry:\n', symmetric[::5])

atm = {1: 'X', 2: 'He', 3: 'F', 4: 'N'}
for i, c in enumerate(coordinates):
    typ = connectivity[i]
    atoms += Atom(atm[typ], c + [0, 0, 2])

write(
    './images/CuPd3_321-sites.pov',
    atoms,
    show_unit_cell=2,
    run_povray=True)
#+END_SRC

#+RESULTS:
:RESULTS:
Coordinates:
 [[ 8.66025404  1.15727512 10.34522484]
 [ 8.66025404 10.41547612 11.68153105]
 [ 2.88675135  3.27894619 12.0156076 ]
 [ 7.21687836  3.27894619 12.0156076 ]
 [ 2.88675135  6.75077156 11.3474545 ]
 [ 5.77350269  7.7151675  11.68153105]
 [ 8.66025404  8.67956344 12.0156076 ]
 [10.10362971  5.97925481 12.0156076 ]
 [ 1.9245009   3.34323925 12.34968415]
 [ 6.73575314  7.45799525 11.90424875]
 [ 6.73575314  1.28586125 11.01337794]
 [ 4.33012702 10.41547612 11.68153105]] 

Connectivity:
 [1 1 2 2 2 2 2 2 3 3 3 4] 

Topology:
 [array([15]) array([21]) array([19, 22]) array([20, 25]) array([18, 19])
 array([17, 23]) array([21, 24]) array([24, 19]) array([19, 25, 22])
 array([24, 23, 17]) array([21, 15, 20]) array([23, 15, 18, 22])] 

Sites by periodicity:
 [  0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5
  90  95 100 105  96 115  97 125  95  93 122 116  90  94 153 116  97 109
 151 125 124 106 153 105 115 127 220 100  97 116 124 177 124 178 100 106
  97  98 178  93 108 115 106 116 126  97 105 100 330 331 340 338 339 331
 340 336 359 359 357 340 341 357 358 334 361 331 331 342 349 336 338 445
  90  90] 

Sites by symmetry:
 [  0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5   0   5
  90  95 100 105  96 115  97 125  95  93 122 116  90  94 153 116  97 109
 151 125 124 106 153 105 115 127 220 100  97 116 124 177 124 178 100 106
  97  98 178  93 108 115 106 116 126  97 105 100 330 331 340 338 339 331
 340 336 359 359 357 340 341 357 358 334 361 331 331 342 349 336 338 445
  90  90]
:END:

When we call =get_periodic_sites()=, we see that some indices are repeated. This is to indicate that these sites are identical in the context of periodic boundaries. If we set =screen= to True, we will only be given the sites within the original unit cell (between 0-1 in fractional coordinates) and all indices will be unique.

In this case there are no symmetrically reducible sites, so =get_symmetric_sites()= returns the same result.

NOTE: The indices of the periodic and symmetry site functions are in reference to the extended unit cell.

*** Adsorption vectors
The most commonly studied miller indices, such as fcc(1, 1, 1), produce a flat surface. This means the most favorable angle of adsorption will always be perpendicular to the surface. This is not always the case for higher miller indices. 

CatKit defines the most favorable vector for adsorption as the one which is furthest from all neighboring surface atoms. This vector is important for the generation of sensible 3D structures from graph enumerations. This is particularly true for adsorbates with multiple atoms.

#+CAPTION: Illustration of adsorption vectors (red dots) on a CuPd_{3} (2, 1, 1) surface.
[[./images/adsorption-vectors.png]]

#+BEGIN_SRC python :results silent :exports code
from catkit.adsorption import AdsorptionSites
from catkit.surface import SlabGenerator
from ase.build import bulk
from ase.io import write
from ase import Atom
import numpy as np

bulk = bulk('Pd', 'fcc', a=5, cubic=True)
bulk[3].symbol = 'Cu'

gen = SlabGenerator(
    bulk,
    miller_index=(2, 1, 1),
    layers=10,
    vacuum=5)

atoms = gen.get_slab(primitive=True)

top, _ = gen.get_voronoi_surface_atoms(atoms, attach_graph=False)
atoms.set_surface_atoms(top)
sites = AdsorptionSites(atoms)

coordinates = sites.get_coordinates()
vectors = sites.get_adsorption_vectors()

heights = np.arange(0, 2, 0.25)
for i, c in enumerate(coordinates):
    for h in heights:
        atoms += Atom('X', c + vectors[i] * h)

atoms.wrap()
write(
    './images/adsorption-vectors.pov',
    atoms * (2, 1, 1),
    show_unit_cell=2,
    rotation='-90x, 20z',
    run_povray=True)
#+END_SRC

** Gas-phase:
- [X] Various chemical species (C, H, and O currently tested)
- [X] Molecules with single bonds
- [X] Molecules with double bonds
- [X] Molecules with triple bonds
- [X] Molecules with single cyclical groups
- [X] Molecules with double cyclical groups
- [X] Molecules with triple cyclical groups
- [X] UFF 3D structure predictions

*** Example usage:
Below is an example script which generates some simple figures using [[https://networkx.github.io/documentation/networkx-1.10/index.html][NetworkX]] code for all molecules up to C_{2}H_{6}.

1 [[./images/molecule-1.png]]
2 [[./images/molecule-2.png]]
3 [[./images/molecule-3.png]]
4 [[./images/molecule-4.png]]
5 [[./images/molecule-5.png]]
6 [[./images/molecule-6.png]]
7 [[./images/molecule-7.png]]
8 [[./images/molecule-8.png]]
9 [[./images/molecule-9.png]]
10 [[./images/molecule-10.png]]
11 [[./images/molecule-11.png]]
12 [[./images/molecule-12.png]]
13 [[./images/molecule-13.png]]
14 [[./images/molecule-14.png]]
15 [[./images/molecule-15.png]]
16 [[./images/molecule-16.png]]
17 [[./images/molecule-17.png]]

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.pathways import ReactionNetwork
import time

start = time.time()

db_name = 'C2H6-example.db'
with ReactionNetwork(db_name=db_name) as rn:

    # Run a molecule search
    rn.molecule_search(
        element_pool={'C': 2, 'H': 6},
        multiple_bond_search=False)

    # Load the molecules
    molecules = rn.load_molecules()

    # Get 3D structure estimates (requires RDKit)
    try:
        from catkit.api.rd_kit import plot_molecule, get_uff_coordinates

        for i, molecule in molecules.items():
            plot_molecule(
                molecule,
                file_name='./images/molecule-{}.png'.format(i))

            molecule = get_uff_coordinates(molecule, steps=50)
            rn.save_3d_structure(molecule)

        images = rn.load_3d_structures()
    except(ImportError):
       pass

print('Process completed in {:.1f}s'.format(time.time() - start))
#+END_SRC

#+RESULTS:
:RESULTS:
Process completed in 28.6s
:END:

** Reaction pathways:
- [X] Addition and Reduction reactions (R1 + R2 <--> P1)
- [X] Bond formation / breaking pathways (R1 <--> P1)
- [X] Reconfiguration reactions (R1 <--> R1*)
- [X] Substitution reactions (R1 + R2 <--> P1 + P2)

*** Reaction networks:
Enumeration of possible elementary reaction steps for gas-phase C_{2}H_{6} species.

#+CAPTION: Reaction network for C2H6 gas phase molecules. Numbers are indexes from the gas-phase example figures.
[[./images/reaction-network.png]]

Pathway exploration is currently integrated with gas-phase molecule search. See the gas-phase molecule search example for further details on molecule generations. Below, a reaction network is generated.

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.pathways import ReactionNetwork
import time

start = time.time()

# Load existing database
db_name = 'C2H6-example.db'

with ReactionNetwork(db_name=db_name) as rn:
    # Substitution pathway search is expensive!
    rn.path_search(
        reconfiguration=False,
        substitution=False)

    rn.plot_reaction_network(file_name='./images/reaction-network.png')

print('Process completed in {:.1f}s'.format(time.time() - start))
#+END_SRC

#+RESULTS:
:RESULTS:
Process completed in 0.6s
:END:

Once the reaction network has been produce, we can illustrate the potential pathways using the following code.

#+BEGIN_SRC python :results output org drawer :exports both
from catkit.pathways import ReactionNetwork
import numpy as np
import networkx as nx
from ase.utils import formula_hill

with ReactionNetwork(db_name='C2H6-example.db') as rn:
    molecules = rn.load_molecules()
    pathways = rn.load_pathways()

names = np.empty(len(molecules) + 1, dtype='a5')
names[0] = ''
for k, v in molecules.items():
    atn = nx.get_node_attributes(v.graph, 'number')

    # These are not always unique identifiers
    hill = formula_hill(list(atn.values()))
    names[k] = hill

for path in pathways:
    print('|{} + {} --> {} + {}|'.format(*names[path]))
#+END_SRC

#+RESULTS:
:RESULTS:
| b'H' + b'H' --> b'' + b'H2'       |
| b'H' + b'C' --> b'' + b'CH'       |
| b'H' + b'CH' --> b'' + b'CH2'     |
| b'H' + b'C2' --> b'' + b'C2H'     |
| b'H' + b'CH2' --> b'' + b'CH3'    |
| b'H' + b'C2H' --> b'' + b'C2H2'   |
| b'H' + b'C2H' --> b'' + b'C2H2'   |
| b'H' + b'CH3' --> b'' + b'CH4'    |
| b'H' + b'C2H2' --> b'' + b'C2H3'  |
| b'H' + b'C2H2' --> b'' + b'C2H3'  |
| b'H' + b'C2H2' --> b'' + b'C2H3'  |
| b'H' + b'C2H3' --> b'' + b'C2H4'  |
| b'H' + b'C2H3' --> b'' + b'C2H4'  |
| b'H' + b'C2H3' --> b'' + b'C2H4'  |
| b'H' + b'C2H4' --> b'' + b'C2H5'  |
| b'H' + b'C2H4' --> b'' + b'C2H5'  |
| b'H' + b'C2H5' --> b'' + b'C2H6'  |
| b'C' + b'C' --> b'' + b'C2'       |
| b'C' + b'CH' --> b'' + b'C2H'     |
| b'C' + b'CH2' --> b'' + b'C2H2'   |
| b'C' + b'CH3' --> b'' + b'C2H3'   |
| b'CH' + b'CH' --> b'' + b'C2H2'   |
| b'CH' + b'CH2' --> b'' + b'C2H3'  |
| b'CH' + b'CH3' --> b'' + b'C2H4'  |
| b'CH2' + b'CH2' --> b'' + b'C2H4' |
| b'CH2' + b'CH3' --> b'' + b'C2H5' |
| b'CH3' + b'CH3' --> b'' + b'C2H6' |
:END:

* Dependencies
CatKit attempts to make use of basic functionalities implemented by existing softwares when possible to extend its capabilities.

- [[https://wiki.fysik.dtu.dk/ase/][Atomic Simulation Environment]]
Atomic Simulation Environment (ASE) is a convenient platform with many good conventions for atoms objects, which CatKit relies heavily upon.

- [[https://atztogo.github.io/spglib/index.html][Spglib]]
A Bulk symmetry library with functionality for identifying rotational and translation symmetries in bulk lattice structures.

- [[http://www.rdkit.org/][RDKit]]
RDKit is a well developed gas-phase molecule enumeration software for SMILES representation of gas-phase molecules and simple UFF integration.

- [[https://networkx.github.io/documentation/networkx-1.10/index.html][NetworkX]]
Code for Graph theory implementation used to identify redundant structures.

A full list of required packaged can be found in [[./requirements.txt]].

